from django import forms
from django.conf import settings
from django.forms import ValidationError

from professionalskills.models import StudentFile
from templates import widgets


def print_formset_errors(errors):
    """
    General function to print the errors as generated by a django-formset factory.

    :param errors: 
    :return: 
    """
    tx = "<ul>"
    index = 1
    for error in errors:
        if str(error) != '':
            tx += "<li>Entry: "+str(index)+" "
            tx += str(error)
            tx+="</li>"
        index += 1
    tx += "</ul>"
    tx += "<br /><a class='button info' onclick='history.back()'>Back</a>"
    return tx


def clean_file_default(self):
    """
    A check for an uploaded file. Checks filesize.

    :param self: 
    :return: 
    """
    file = self.cleaned_data.get("File")
    if not file:
        raise ValidationError("No file supplied!")
    s = file.size
    if s > settings.MAX_UPLOAD_SIZE:
        raise ValidationError(
            "The file is too large, it has to be at most " + str(round(settings.MAX_UPLOAD_SIZE / 1024 / 1024)) + "MB and is " + str(
                round(s / 1024 / 1024)) + "MB.")
    return file


class FileForm(forms.ModelForm):
    """
    A form to upload a file. It has a filefield and a caption field. More fields can be added.
    """
    class Meta:
        model = StudentFile  # when inherited, this model is usually overwritten. Studentfile is only used as default.
        fields = ['File', 'Caption']
        widgets = {
            'Caption': widgets.MetroTextInput,
            'File': widgets.MetroFileInput
        }

    def __init__(self, *args, **kwargs):
        self.request = kwargs.pop('request', None)
        super().__init__(*args, **kwargs)

    def clean_File(self):
        return clean_file_default(self)


class ConfirmForm(forms.Form):
    """Form to confirm a action. Used for extra validation. Not linked to a model."""
    confirm = forms.BooleanField(widget=widgets.MetroCheckBox, label='Confirm:')